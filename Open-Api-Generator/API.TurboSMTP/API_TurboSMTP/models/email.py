# coding: utf-8

"""
    TurboSMTP Public APIs

    This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       

    The version of the OpenAPI document: 2.0.0-oas3
    Contact: api@turbo-smtp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Email(BaseModel):
    """
    Email
    """ # noqa: E501
    var_from: Optional[StrictStr] = Field(default=None, description="from mail address", alias="from")
    to: Optional[StrictStr] = Field(default=None, description="comma-separated recipients emails list")
    subject: Optional[StrictStr] = Field(default=None, description="email subject")
    cc: Optional[StrictStr] = Field(default=None, description="comma-separated copy emails list")
    bcc: Optional[StrictStr] = Field(default=None, description="comma-separated hidden copy emails list")
    content: Optional[StrictStr] = Field(default=None, description="text content of the email")
    html_content: Optional[StrictStr] = Field(default=None, description="html content of the email")
    custom_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="email additional headers, use any additional header like standard ones List-Unsubscribe (to allow users to easily unsubscribe), X-Entity-Ref-ID (to handle how gmail and other clients group threads), and your own ones.  ")
    reference_id: Optional[StrictStr] = Field(default=None, description="custom argument included within an email to be added to the Event Webhook response.")
    x_campaign_id: Optional[StrictStr] = Field(default=None, description="custom argument included within an email identify the campaign the email belongs to.", alias="X-campaign-ID")
    mime_raw: Optional[StrictStr] = Field(default=None, description="mime message which replaces content and hmtl content")
    attachments: Optional[List[Attachment]] = Field(default=None, description="array of attachment objects")
    __properties: ClassVar[List[str]] = ["from", "to", "subject", "cc", "bcc", "content", "html_content", "custom_headers", "reference_id", "X-campaign-ID", "mime_raw", "attachments"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Email from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['subject'] = None

        # set to None if cc (nullable) is None
        # and model_fields_set contains the field
        if self.cc is None and "cc" in self.model_fields_set:
            _dict['cc'] = None

        # set to None if bcc (nullable) is None
        # and model_fields_set contains the field
        if self.bcc is None and "bcc" in self.model_fields_set:
            _dict['bcc'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if html_content (nullable) is None
        # and model_fields_set contains the field
        if self.html_content is None and "html_content" in self.model_fields_set:
            _dict['html_content'] = None

        # set to None if custom_headers (nullable) is None
        # and model_fields_set contains the field
        if self.custom_headers is None and "custom_headers" in self.model_fields_set:
            _dict['custom_headers'] = None

        # set to None if reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_id is None and "reference_id" in self.model_fields_set:
            _dict['reference_id'] = None

        # set to None if x_campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.x_campaign_id is None and "x_campaign_id" in self.model_fields_set:
            _dict['X-campaign-ID'] = None

        # set to None if mime_raw (nullable) is None
        # and model_fields_set contains the field
        if self.mime_raw is None and "mime_raw" in self.model_fields_set:
            _dict['mime_raw'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Email from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from"),
            "to": obj.get("to"),
            "subject": obj.get("subject"),
            "cc": obj.get("cc"),
            "bcc": obj.get("bcc"),
            "content": obj.get("content"),
            "html_content": obj.get("html_content"),
            "custom_headers": obj.get("custom_headers"),
            "reference_id": obj.get("reference_id"),
            "X-campaign-ID": obj.get("X-campaign-ID"),
            "mime_raw": obj.get("mime_raw"),
        })
        return _obj


