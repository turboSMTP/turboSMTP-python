# coding: utf-8

"""
    TurboSMTP Public APIs

    This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       

    The version of the OpenAPI document: 2.0.0-oas3
    Contact: api@turbo-smtp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from API_TurboSMTP.api.subaccounts_api import SubaccountsApi


class TestSubaccountsApi(unittest.TestCase):
    """SubaccountsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SubaccountsApi()

    def tearDown(self) -> None:
        pass

    def test_check_if_account_email_exists(self) -> None:
        """Test case for check_if_account_email_exists

        Check if account email exists in turboSMTP
        """
        pass

    def test_create_subaccount(self) -> None:
        """Test case for create_subaccount

        Create Subaccount.
        """
        pass

    def test_delete_logo_file(self) -> None:
        """Test case for delete_logo_file

        Delete agency logo
        """
        pass

    def test_get_active_plan(self) -> None:
        """Test case for get_active_plan

        Get subaccount active plan.
        """
        pass

    def test_get_agency_settings(self) -> None:
        """Test case for get_agency_settings

        Update Agency details
        """
        pass

    def test_get_logo_file(self) -> None:
        """Test case for get_logo_file

        Get agency logo
        """
        pass

    def test_get_subaccount_details(self) -> None:
        """Test case for get_subaccount_details

        Get sub account details
        """
        pass

    def test_get_subaccounts(self) -> None:
        """Test case for get_subaccounts

        Get Subaccounts lists information
        """
        pass

    def test_subaccount_authentication_login(self) -> None:
        """Test case for subaccount_authentication_login

        Login to a subaccount
        """
        pass

    def test_update_agency_settings(self) -> None:
        """Test case for update_agency_settings

        Update Agency details
        """
        pass

    def test_update_subaccount_details(self) -> None:
        """Test case for update_subaccount_details

        Update sub account details
        """
        pass

    def test_update_subaccount_smtp_limit(self) -> None:
        """Test case for update_subaccount_smtp_limit

        Set subaccount smtp limit
        """
        pass

    def test_update_subaccount_status(self) -> None:
        """Test case for update_subaccount_status

        Set subaccount status
        """
        pass

    def test_upload_logo_file(self) -> None:
        """Test case for upload_logo_file

        Upload agency logo
        """
        pass


if __name__ == '__main__':
    unittest.main()
