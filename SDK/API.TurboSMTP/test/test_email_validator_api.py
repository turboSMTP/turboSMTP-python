# coding: utf-8

"""
    TurboSMTP Public APIs

    This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       

    The version of the OpenAPI document: 2.0.0-oas3
    Contact: api@turbo-smtp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from API_TurboSMTP.api.email_validator_api import EmailValidatorApi


class TestEmailValidatorApi(unittest.TestCase):
    """EmailValidatorApi unit test stubs"""

    def setUp(self) -> None:
        self.api = EmailValidatorApi()

    def tearDown(self) -> None:
        pass

    def test_delete_email_validation_list_by_id(self) -> None:
        """Test case for delete_email_validation_list_by_id

        Delete email validation list
        """
        pass

    def test_export_csv_validated_emails_by_list(self) -> None:
        """Test case for export_csv_validated_emails_by_list

        Export Validated Emails by Email Validation List to CSV File
        """
        pass

    def test_get_email_validation_data_by_email_id(self) -> None:
        """Test case for get_email_validation_data_by_email_id

        Get Email validation data by email ID.
        """
        pass

    def test_get_email_validation_list_summary(self) -> None:
        """Test case for get_email_validation_list_summary

        Get Email validation list details
        """
        pass

    def test_get_email_validation_lists(self) -> None:
        """Test case for get_email_validation_lists

        Get Email validation lists information
        """
        pass

    def test_get_email_validation_subscription(self) -> None:
        """Test case for get_email_validation_subscription

        Get Email Validation subscription
        """
        pass

    def test_get_validated_emails_by_list(self) -> None:
        """Test case for get_validated_emails_by_list

        Get Validated Emails by Email Validation List
        """
        pass

    def test_upload_email_validation_file(self) -> None:
        """Test case for upload_email_validation_file

        Upload file for email validation
        """
        pass

    def test_validate_email(self) -> None:
        """Test case for validate_email

        Validate single email address
        """
        pass

    def test_validate_email_validator_list(self) -> None:
        """Test case for validate_email_validator_list

        Validate list in Email Validator 
        """
        pass


if __name__ == '__main__':
    unittest.main()
