# coding: utf-8

"""
    TurboSMTP Public APIs

    This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       

    The version of the OpenAPI document: 2.0.0-oas3
    Contact: api@turbo-smtp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from API_TurboSMTP.models.analytic_mail_item import AnalyticMailItem
from API_TurboSMTP.models.analytic_mail_status import AnalyticMailStatus
from API_TurboSMTP.models.analytic_order_by import AnalyticOrderBy
from API_TurboSMTP.models.analytics_list_sucess_responset_body import AnalyticsListSucessResponsetBody
from API_TurboSMTP.models.list[analytic_filter_by_option] import List[AnalyticFilterByOption]
from API_TurboSMTP.models.order_type import OrderType

from API_TurboSMTP.api_client import ApiClient, RequestSerialized
from API_TurboSMTP.api_response import ApiResponse
from API_TurboSMTP.rest import RESTResponseType


class AnalyticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def export_analytics_data_csv(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Export Analytics data in CSV file

        Export Analytics data in CSV file 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_analytics_data_csv_serialize(
            var_from=var_from,
            to=to,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_analytics_data_csv_with_http_info(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Export Analytics data in CSV file

        Export Analytics data in CSV file 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_analytics_data_csv_serialize(
            var_from=var_from,
            to=to,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_analytics_data_csv_without_preload_content(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export Analytics data in CSV file

        Export Analytics data in CSV file 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_analytics_data_csv_serialize(
            var_from=var_from,
            to=to,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_analytics_data_csv_serialize(
        self,
        var_from,
        to,
        status,
        filter_by,
        filter,
        smart_search,
        orderby,
        ordertype,
        tz,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'status[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_from is not None:
            if isinstance(var_from, date):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if to is not None:
            if isinstance(to, date):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if status is not None:
            
            _query_params.append(('status[]', status))
            
        if filter_by is not None:
            
            _query_params.append(('filter_by', filter_by))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if smart_search is not None:
            
            _query_params.append(('smart_search', smart_search))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby.value))
            
        if ordertype is not None:
            
            _query_params.append(('ordertype', ordertype.value))
            
        if tz is not None:
            
            _query_params.append(('tz', tz))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/csv', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'consumerSecret', 
            'ApiKeyAuth', 
            'consumerKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics/csv',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_analytics_data(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page number")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numbers of rows per page to return")] = None,
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsListSucessResponsetBody:
        """Get Analytics Data

        Get Analytics Data 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param page: Page number
        :type page: int
        :param limit: The numbers of rows per page to return
        :type limit: int
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_serialize(
            var_from=var_from,
            to=to,
            page=page,
            limit=limit,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListSucessResponsetBody",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_analytics_data_with_http_info(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page number")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numbers of rows per page to return")] = None,
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsListSucessResponsetBody]:
        """Get Analytics Data

        Get Analytics Data 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param page: Page number
        :type page: int
        :param limit: The numbers of rows per page to return
        :type limit: int
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_serialize(
            var_from=var_from,
            to=to,
            page=page,
            limit=limit,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListSucessResponsetBody",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_analytics_data_without_preload_content(
        self,
        var_from: Annotated[date, Field(description="Start date")],
        to: Annotated[date, Field(description="End date")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page number")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The numbers of rows per page to return")] = None,
        status: Annotated[Optional[List[AnalyticMailStatus]], Field(description="Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   ")] = None,
        filter_by: Annotated[Optional[List[AnalyticFilterByOption]], Field(description="Filter by")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Text to search (recipient, sender, email subject or reason for suppression)")] = None,
        smart_search: Annotated[Optional[StrictBool], Field(description="Smart search")] = None,
        orderby: Annotated[Optional[AnalyticOrderBy], Field(description="Order by")] = None,
        ordertype: Optional[OrderType] = None,
        tz: Annotated[Optional[StrictStr], Field(description="Timezone Offset")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Analytics Data

        Get Analytics Data 

        :param var_from: Start date (required)
        :type var_from: date
        :param to: End date (required)
        :type to: date
        :param page: Page number
        :type page: int
        :param limit: The numbers of rows per page to return
        :type limit: int
        :param status: Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  <br /> Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: <br />      'Clicks' = 'CLICK',     'Unsubscribes' = 'UNSUB',     'Spam' = 'REPORT',     'Drop' = 'SYSFAIL',     'Queued' = 'NEW' or 'DEFER',     'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',     'Bounce': 'FAIL'.   
        :type status: List[AnalyticMailStatus]
        :param filter_by: Filter by
        :type filter_by: List[AnalyticFilterByOption]
        :param filter: Text to search (recipient, sender, email subject or reason for suppression)
        :type filter: str
        :param smart_search: Smart search
        :type smart_search: bool
        :param orderby: Order by
        :type orderby: AnalyticOrderBy
        :param ordertype:
        :type ordertype: OrderType
        :param tz: Timezone Offset
        :type tz: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_serialize(
            var_from=var_from,
            to=to,
            page=page,
            limit=limit,
            status=status,
            filter_by=filter_by,
            filter=filter,
            smart_search=smart_search,
            orderby=orderby,
            ordertype=ordertype,
            tz=tz,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListSucessResponsetBody",
            '400': None,
            '401': "AuthorizationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_analytics_data_serialize(
        self,
        var_from,
        to,
        page,
        limit,
        status,
        filter_by,
        filter,
        smart_search,
        orderby,
        ordertype,
        tz,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'status[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if var_from is not None:
            if isinstance(var_from, date):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if to is not None:
            if isinstance(to, date):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if status is not None:
            
            _query_params.append(('status[]', status))
            
        if filter_by is not None:
            
            _query_params.append(('filter_by', filter_by))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if smart_search is not None:
            
            _query_params.append(('smart_search', smart_search))
            
        if orderby is not None:
            
            _query_params.append(('orderby', orderby.value))
            
        if ordertype is not None:
            
            _query_params.append(('ordertype', ordertype.value))
            
        if tz is not None:
            
            _query_params.append(('tz', tz))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'consumerSecret', 
            'ApiKeyAuth', 
            'consumerKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_analytics_data_by_id(
        self,
        id: Annotated[StrictInt, Field(description="Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticMailItem:
        """Get Analytics Single Item by ID

        Get Analytics Data by ID 

        :param id: Id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticMailItem",
            '400': "CommonBadRequestResponseBody",
            '401': "AuthorizationError",
            '404': "CommonMessageResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_analytics_data_by_id_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticMailItem]:
        """Get Analytics Single Item by ID

        Get Analytics Data by ID 

        :param id: Id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticMailItem",
            '400': "CommonBadRequestResponseBody",
            '401': "AuthorizationError",
            '404': "CommonMessageResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_analytics_data_by_id_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Analytics Single Item by ID

        Get Analytics Data by ID 

        :param id: Id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_analytics_data_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticMailItem",
            '400': "CommonBadRequestResponseBody",
            '401': "AuthorizationError",
            '404': "CommonMessageResponseBody",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_analytics_data_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'consumerSecret', 
            'ApiKeyAuth', 
            'consumerKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


